name: continuous integration

# trigger on pushes, PRs and every day at 05:00
on: 
  push:
  pull_request:
  schedule:
      - cron: '0 5 * * *'






jobs:
# run tests on linux, macos and windows
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [linux-nightly-release, linux-nightly-debug, linux-stable-release, linux-stable-debug, linux-beta-release, linux-beta-debug, macos-nightly-release, macos-nightly-debug, windows-nightly-release, windows-nightly-debug]
        include:
          - build: linux-nightly-release
            os: ubuntu-latest
            toolchain: nightly
            debug: false
          - build: linux-nightly-debug
            os: ubuntu-latest
            toolchain: nightly
            debug: true


          - build: macos-nightly-release
            os: macos-latest
            toolchain: nightly
            mode: release
            debug: false
          - build: macos-nightly-debug
            os: macos-latest
            toolchain: nightly
            debug: true


          - build: windows-nightly-release
            os: windows-latest
            toolchain: nightly
            debug: false
          - build: windows-nightly-debug
            os: windows-latest
            toolchain: nightly
            debug: true


          - build: linux-beta-release
            os: ubuntu-latest
            toolchain: beta
            debug: false
          - build: linux-beta-debug
            os: ubuntu-latest
            toolchain: beta
            debug: true


          - build: linux-stable-debug
            os: ubuntu-latest
            toolchain: stable
            debug: true
          - build: linux-stable-release
            os: ubuntu-latest
            toolchain: stable
            debug: false


    steps:
    - uses: actions/checkout@v1
    - name: install toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.toolchain }}
        override: true
        profile: minimal
    - name: cargo build
      run: cargo build --verbose --all
      if: matrix.debug == true
    - name: cargo build --release --all
      run: cargo build --verbose --release
      if: matrix.debug == false
    - name: test 
      run: cargo test --verbose --all -- --nocapture
      if: matrix.debug == true
    - name: test  --release
      run: cargo test --verbose --release --all -- --nocapture
      if: matrix.debug == false
    - name: cargo run 
      run: cargo run
      if: matrix.debug == true 
    - name: cargo run --release
      run: cargo run --release
      if: matrix.debug == false 
    - name: install cargo-cache
      run: cargo install --force --path .
      if: matrix.debug == false
    - name: install cargo-cache --debug
      run: cargo install --force --path . --debug
      if: matrix.debug == true
    - name: run cargo-cache 
      run: |
        cargo-cache
        cargo cache
        cargo cache --help
        cargo cache --top-cache-items 20
        cargo cache --gc --dry-run
        cargo cache --gc
        cargo cache --info
        cargo cache --list-dirs
        cargo cache --keep-duplicate-crates 10 --dry-run
        cargo cache --keep-duplicate-crates 1  --dry-run
        cargo cache --keep-duplicate-crates 0  --dry-run




# check for vulns in deps with cargo-audit
  cargo-audit:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: install nightly toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        override: true
        profile: minimal
    - name: install cargo-audit
      run: cargo install cargo-audit --debug
    - name: run cargo-audit
      run: cargo-audit

# code with clippy
  clippy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: install toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        override: true
        profile: default
    - name: clippy
      run: cargo clippy --all-targets --all-features

# make sure code formatting is consistent
  rustfmt:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: install toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        override: true
        profile: default
    - name: rustfmt check formatting
      run: cargo fmt --all -- --check