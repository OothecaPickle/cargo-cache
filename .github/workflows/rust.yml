name: continuous integration

# trigger on pushes, PRs and every day at 05:00
on: 
  push:
  pull_request:
  schedule:
      - cron: '0 5 * * *'






jobs:
# run tests on linux, macos and windows
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [linux-stable, linux-beta, linux-nightly, macos-nightly, windows-nightly]
        include:
          - build: linux-nightly
            os: ubuntu-latest
            toolchain: nightly

          - build: macos-nightly
            os: macos-latest
            toolchain: nightly

          - build: windows-nightly
            os: windows-latest
            toolchain: nightly

          - build: linux-beta
            os: ubuntu-latest
            toolchain: beta

          - build: linux-stable
            os: ubuntu-latest
            toolchain: stable

    steps:
    - uses: actions/checkout@v1
    - name: install toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.toolchain }}
        override: true
        profile: minimal
    - run: cargo build --verbose
    - run: cargo test --verbose
    - run: cargo install --force --path . ${DEBUG}
    - run: |
        cargo-cache
        cargo cache
        cargo cache --help
        cargo cache --top-cache-items 20
        cargo cache --gc --dry-run
        cargo cache --gc
        cargo cache --info
        cargo cache --list-dirs
        cargo cache --keep-duplicate-crates 10 --dry-run
        cargo cache --keep-duplicate-crates 1  --dry-run
        cargo cache --keep-duplicate-crates 0  --dry-run




# check for vulns in deps with cargo-audit
  cargo-audit:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: install nightly toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        override: true
        profile: minimal
    - name: install cargo-audit
      run: cargo install cargo-audit --debug
    - name: run cargo-audit
      run: cargo-audit

# code with clippy
  clippy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: install toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        override: true
        profile: default
    - name: clippy
      run: cargo clippy --all-targets --all-features

# make sure code formatting is consistent
  rustfmt:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: install toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        override: true
        profile: default
    - name: rustfmt check formatting
      run: cargo fmt --all -- --check